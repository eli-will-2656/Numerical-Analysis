% Goal: Create a cubic spline that interpolate a function (Runge)

% (0) Set up the interpolation problem
% (0.1) Sample the Runge function at (t_0,y_0)...(t_n,y_n)
for n=2.^(2:6)               
    t = linspace(-1, 1, n+1);
    y = arrayfun(@Runge, t);
    
    % (1) Compute spline coeffients
    z = Spline_Coef(n, t, y);
    
    % (2) Evaluate the spline
    m = 200;                    
    X = linspace(-1, 1, m+1);
    Y_Runge = arrayfun(@Runge, X);
    Y_Spline = arrayfun(@(x) Spline_Eval(x, n, t, y, z), X);
    
    % (3) Printout
    plot(X, Y_Runge)
    hold on
    plot(X, Y_Spline)
    hold on
    legend('Runge','Spline')
    title("Spline Interpolation of Runge(x) on interval [-1,1]")
    
    fprintf("The Maximum Error: %.15f", max(abs(Y_Runge-Y_Spline)))



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% Function Definitions
function sum = Spline_Eval(x, n, t, y, z)
for i=n:-1:1
    if x - t(i) >= 0
        break
    end
end
h = t(i+1) - t(i);

sum = z(i+1)/(6*h) * (x - t(i))^3 ...
   +  z(i)/(6*h) * (t(i+1) - x)^3 + ...
           (y(i+1) / h - h/6 *z(i+1))*(x-t(i)) + (y(i) / h - h/6 * z(i)) *(t(i+1) - x);
end


function z = Spline_Coef(n, t, y)
    for i=1:n
        h(i) = t(i+1) - t(i);           % Length of ith interval
        b(i) = (y(i+1) - y(i))/h(i);    % Average slope in ith interval
    end
    
    u(2) = 2 * (h(1) + h(2));
    v(2) = 6 * (b(2)-b(1));
    
    for i=3:n
        u(i) = 2 * (h(i) + h(i-1)) - h(i-1)^2/u(i-1);
        v(i) = 6 * (b(i) - b(i-1)) - h(i-1)*v(i-1) / u(i-1);
    end
    
    z(n+1) = 0;
    z(1) = 0;
    for i = n:-1:2
        z(i) = (v(i) - h(i) * z(i+1)) / u(i);
    end
end

function y = Runge(x)
y = 1/(1 + 25*x^2);
end